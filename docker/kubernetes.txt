#기본 명령어
# 폴더 삭제
rm -r 폴더이름
rm -rf 폴더이름

# 폴더 복사
cp -r 원본경로 대상경로

# 파일 경로 설정
sudo chmod -R 755 /opt/upload
sudo chown -R <사용자>:<그룹> /opt/upload

# 도커 컨테이너
docker ps # 확인

# 컨테이너
docker exec -it 컨테이너이름 bash
kubectl exec -it 컨테이너이름 -- bashcd

# 파드
kubectl get pod -o wide # 확인
kubectl delete pod <Pod 이름> # 삭제
kubectl describe pod 파드이름 # 파드 상태 확인


# 디플로이먼트
# 디플로이먼트는 새로 업데이트 되면 기존 파드를 자동으로 관리함 / 같은 이름의 디플로이먼트가 있어도 상관없음
kubectl get deployment # 디플로이먼트 확인
kubectl delete deployment 서비스 이름 # 디플로이먼트 삭제
kubectl apply -f deployment.yaml # 디플로이먼트 생성

# 서비스
# 서비스의 External_ip와 포트번호로 웹에 접속되는지 확인
kubectl get services # 서비스 확인
kubectl delete service 서비스 이름 # 서비스 삭제
kubectl apply -f service.yaml # 서비스 생성

----------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------


# 운영환경 배포 + 젠킨스
# DevOps 환경에서의 배포

# 자바설치
yum install java-1.8.0-openjdk-devel -y


# 오라클

----------------------------------------------------------------------------------------------------------------------
# BackEnd
# 빌드순서 : 이미지 생성 --> 이미지 푸시 --> deployment 생성 --> 서비스 생성

# build 파일에 권한 부여
chmod 744 build-in-host.sh

# deployment.yaml에 첨부파일을 위한 volume 확인
# img 이름 체크
# env 체크
vi deployment.yaml

# service.yaml에 로드밸런서 확인
vi service.yaml

# build 파일 실행
./build-in-host.sh

----------------------------------------------------------------------------------------------------------------------
# FrontEnd
# 빌드순서 : 이미지 생성(nginx.conf 이용) --> 이미지 푸시 --> deployment 생성 --> 서비스 생성

# build 파일에 권한 주기
chmod 744 build-in-host.sh

# nginx.conf 파일 확인
# proxy_pass를 BE service EXTERNAL-IP로 설정
# 개발환경에서는 ifconfig eth0 --> host ip 입력
vi nginx.conf

# deployment.yaml에 첨부파일을 위한 volume 확인
# img 이름 체크
# env 체크
vi deployment.yaml

# service.yaml에 로드밸런서 확인
vi service.yaml

# build 파일 실행
./build-in-host.sh

----------------------------------------------------------------------------------------------------------------------
# 젠킨스
# ngrok 초기 설정
   ## ngrok 사용이유
      - 사설 IP를 외부에서 접근 가능하도록 하기 위해 / 공인 IP가 없는 환경에서의 대안 / 테스트 환경에서 빠른 설정 / 보안 테스트 및 데모 환경 
      - 
# https://ngrok.com/ 접속 --> 로그인 --> Your Authtoken copy
sudo yum install wget -y
wget https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-linux-amd64.tgz
sudo mv ngrok /usr/local/bin/
ngrok version

# 토큰 추가
ngrok config add-authtoken 내 토큰 입력

# 실행
docker run -it -e NGROK_AUTHTOKEN=3xyJ2kZpRQyWx1KnU9xyz12345_exampleAuthtoken ngrok/ngrok http 192.168.1.11:80
docker run -it -e NGROK_AUTHTOKEN=내토큰 ngrok/ngrok http 192.168.1.11:80

<<<<<<<<<<<<<<<<
# 토큰 추가
ngrok config add-authtoken 2nrjyJ8pYgxxQcRZw8hqLG0y59d_34boh3e1Ayh8ix2VtrDKC

# 실행
docker run -it -e NGROK_AUTHTOKEN=3xyJ2kZpRQyWx1KnU9xyz12345_exampleAuthtoken ngrok/ngrok http 192.168.1.11:80
docker run -it -e NGROK_AUTHTOKEN=2nrjyJ8pYgxxQcRZw8hqLG0y59d_34boh3e1Ayh8ix2VtrDKC ngrok/ngrok http 192.168.1.11:80


# 실행 시 Forwording 주소로 깃 웹훅 생성

Payload URL * --> https://Forwording주소/github-webhook/
Content type * --> application/json

-------------------------------------------------------------------------------------------------------------------------

# 내도메인한국
# https://xn--220b31d95hq8o.xn--3e0b707e/


